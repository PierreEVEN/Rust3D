#pragma once twice
#pragma test two
#pragma ENABLE_HLSL
#pragma integer 4
#pragma version "4.5.8.9 test"

global(test, "shader a", shader_b) {

    struct VSInput
    {
        float2 aPos 	: POSITION;
        float2 aUV 		: TEXCOORD;
        float4 aColor 	: COLOR;
    }

    struct PushConsts
    {
        float2 uScale;
        float2 uTranslate;
    }

    // pixel shader function
    float4 pixelShader(v2p input) : SV_TARGET
    {
        float4 color = tex2D(MyTexture, input.uv);
        return color * input.color;
    }
}

/*
vertex(example) {
    // declaration of functions

    // data structure : before vertex shader (mesh info)
    struct vertexInfo
    {
        float3 position : POSITION;
        float2 uv: TEXCOORD0;
        float3 color : COLOR;
    }

    // data structure : vertex shader to pixel shader
    // also called interpolants because values interpolates through the triangle
    // from one vertex to another
    struct v2p
    {
        float4 position : SV_POSITION;
        float3 uv : TEXCOORD0;
        float3 color : TEXCOORD1;
    }

    // uniforms : external parameters
    sampler2D MyTexture; //@TODO : property are not supported
    float2 UVTile;
    matrix4x4 worldViewProjection;

    // vertex shader function
    v2p vertexShader(vertexInfo input)
    {
        v2p output;
        output.position = mul(worldViewProjection, float4(input.position,1.0));
        output.uv = input.uv * UVTile;
        output.color = input.color;
        return output;
    }

    // pixel shader function
    float4 pixelShader(v2p input) : SV_TARGET
    {
        float4 color = tex2D(MyTexture, input.uv);
        return color * input.color;
    }
}
*/